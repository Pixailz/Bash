#!/bin/bash
#setup-server project plan

##############################
# Bash Color
warning='\033[1;5;31m'
blue='\e[34m'
answer='\033[1;92m'
info='\033[1;32m'
download='\e[1;5;93m'
restore='\033[0m'
reset='\e[0m'
##############################

##############################
# Prompt colored

sleeping_time_for_color="1"

function warning() {
    printf "${warning}[ WARNING  ]${reset} \e[1m$*${reset}\n"
    sleep ${sleeping_time_for_color}
}

function question() {
    printf "${blue}[ QUESTION ]${reset} $*${reset}\n"
    sleep ${sleeping_time_for_color}
}

function answer() {
    printf "${answer}[${reset}\e[7m$1${reset}${answer}] ${reset}$2${reset}\n"
}

function info() {
    printf "${info}[   INFO   ]${reset} $*${reset}\n"
    sleep ${sleeping_time_for_color}
}

function prompt() {
    printf "${blue}[ WAITING..]: ${reset}"
}

function download() {
    printf "${download}[DOWNLOADNG]${reset} $* ...${reset}\n"
}

function install() {
    printf "${download}[APTINSTALL]${reset} $*${reset}\n"
 }
##############################

##############################
# some utils function
function check_root() {
    if [[ "$EUID" -ne "0" ]];then
    warning "Scripts must be run as root."
    exit 1
    fi
}

function ask() {
    local prompt=$1
    local default=$2
    local choice=""
    local loop="true"
    while $loop; do
    if [[ "$default" == "y" ]]; then
        printf "${blue}[ASK (Y/n) ]${reset} ${prompt} ${reset}"
        read choice
    elif [[ "$default" == "n" ]]; then
        printf "${blue}[ASK (y/N) ]${reset} ${prompt} ${reset}"
        read choice
    else
        printf "${blue}[ASK (y/n) ]${reset} ${prompt} ${reset}"
        read choice
    fi
    choice=${choice:0:1}
    choice=`echo $choice | tr '[A-Z]' '[a-z]'`
    if [[ "$choice" != "y" ]] && [[ "$choice" != "n" ]]; then
        warning "Wrong Choice"
    elif [[ "$choice" == "y" ]]; then return 1;
    elif [[ "$choice" == "n" ]]; then return 0;
    fi
    done
}
##############################

function enable_ufw() {
    echo "" >> /etc/ufw/ufw.conf
    echo "IPV6=NO" >> /etc/ufw/ufw.conf

    ufw disable
    ufw enable
}

function update() {
    if [[ $(sudo apt update 2>/dev/null | grep "can be upgraded") ]]; then
        info "update available"
        apt upgrade -y
    else 
        warning "no update available"
    fi
}

function install_default() {
    if [[ ! -f "/etc/ssh/sshd_config" ]]; then
        warning "openssh-server not installed"
        sudo apt install openssh-server -y
    else
        warning "openssh-server installed"
    fi

    if [[ ! -f "/etc/vsftpd.conf" ]]; then
        info "vsftpd not installed"
        apt install vsftpd -y
    else
        info "vsftpd installed"
    fi

    apt install -y bashtop top linux-headers-`uname -r` build-essential
}

function configure_time() {
    timedatectl set-timezone ${timezone_loc}
}

function configure_ip() {
    if [[ -f "/etc/netplan/00-installer-config.yaml" ]]; then
        rm /etc/netplan/00-installer-config.yaml
    fi

    interface="$(ip a s | grep "2: " | cut -d" " -f2 | cut -d":" -f1)"
        
    echo "network:" > temp_netcfg.yaml
    echo "  version: 2" >> temp_netcfg.yaml
    echo "  renderer: networkd" >> temp_netcfg.yaml
    echo "  ethernets:" >> temp_netcfg.yaml
    echo "    ${interface}:" >> temp_netcfg.yaml
    echo "      addresses:" >> temp_netcfg.yaml
    echo "      - ${ip}/24" >> temp_netcfg.yaml
    echo "      gateway4: ${gateway}" >> temp_netcfg.yaml
    echo "      nameservers:" >> temp_netcfg.yaml
    echo "        addresses:" >> temp_netcfg.yaml
    echo "        - ${dns_1}" >> temp_netcfg.yaml
    echo "        - ${dns_2}" >> temp_netcfg.yaml

    mv temp_netcfg.yaml /etc/netplan/01-netcfg.yaml
    rm -f temp_netcfg.yaml

    netplan apply
    ip link set ${interface} down
    ip link set ${interface} up
}

function configure_sharedfolder() {
    sharedfolder_path="/home/${vsftpd_user}/Dinosaure"
    
    if [[ ! -f "${sharedfolder_path}" ]]; then
        mkdir ${sharedfolder_path}
    fi

    sharedfolder_user_uid=$(id ${sharedfolder_user}|  cut -d"=" -f2 | cut -d"(" -f1)
    sharedfolder_user_gid=$(id ${sharedfolder_user}|  cut -d"=" -f3 | cut -d"(" -f1)

    echo -e ".host:/${sharedfolder_name}\t${sharedfolder_path}\tfuse.vmhgfs-fuse\tallow_other,uid=${sharedfolder_user_uid},gid=${sharedfolder_user_gid}\t0\t0" | sudo tee -a /etc/fstab
}

function configure_ssh_ufw() {
    ufw allow ${ssh_port}/tcp

    ufw disable
    ufw enable
}

function configure_ssh() {
    
    if [[ $(cat /etc/ssh/sshd_config | grep -e "^#PermitRootLogin") ]]; then
        info "Activating PermitRootLogin"
        sed -i "s/#PermitRootLogin/PermitRootLogin/" /etc/ssh/sshd_config
    fi
    current_settings_PermitRootLogin=$(grep "^PermitRootLogin" /etc/ssh/sshd_config | cut -d" " -f2)
    sed -i "s/PermitRootLogin ${current_settings_PermitRootLogin}/PermitRootLogin no/" /etc/ssh/sshd_config
    

    if [[ $(cat /etc/ssh/sshd_config | grep -e "^#Port") ]]; then
        info "Activating Port"
        sed -i "s/#Port/Port/" /etc/ssh/sshd_config
    fi
    current_settings_Port=$(grep "^Port" /etc/ssh/sshd_config | cut -d" " -f2)
    sed -i "s/Port ${current_settings_Port}/Port ${ssh_port}/" /etc/ssh/sshd_config
    
    info "restarting service"
    systemctl restart ssh

    configure_ssh_ufw
}

function configure_vsftpd_ufw() {
    ufw allow ${vsftpd_ftp_data_port},${vsftpd_listen_port},${vsftpd_pasv_min_port}:${vsftpd_pasv_max_port}/tcp
    
    ufw disable
    ufw enable
}

function configure_vsftpd_user() {
    info "Creating ${vsftpd_user} for vsftpd service"
    useradd ${vsftpd_user} --create-home --shell /bin/bash --groups ftp
    info "Asking password for ${vsftpd_user}"
    passwd ftpix
}

function configure_vsftpd() {
    if [[ ! -f "/etc/vsftpd.conf" ]]; then
        info "vsftpd not installed"
        apt install vsftpd -y
    else
        info "vsftpd installed"
    fi
    
    cp /etc/vsftpd.conf ./temp_vsftpd.conf
    
    # Header
    echo "" >> temp_vsftpd.conf
    echo "#################" >> temp_vsftpd.conf
    echo "# Custom Settings" >> temp_vsftpd.conf

    info "Port Config"
    echo "" >> temp_vsftpd.conf
    echo "listen_port="${vsftpd_listen_port}"" >> temp_vsftpd.conf
    echo "ftp_data_port="${vsftpd_ftp_data_port}"" >> temp_vsftpd.conf

    info "Enable Passv"
    echo "" >> temp_vsftpd.conf
    echo "pasv_enable="${vsftpd_pasv_enable}"" >> temp_vsftpd.conf
    echo "pasv_min_port="${vsftpd_pasv_min_port}"" >> temp_vsftpd.conf
    echo "pasv_max_port="${vsftpd_pasv_max_port}"" >> temp_vsftpd.conf

    info "Enable local user to write"
    echo "" >> temp_vsftpd.conf
    echo "local_enable="${vsftpd_local_enable}"" >> temp_vsftpd.conf
    echo "write_enable="${vsftpd_write_enable}"" >> temp_vsftpd.conf
    echo "allow_writeable_chroot="${vsftpd_allow_writeable_chroot}"" >> temp_vsftpd.conf

    info "Configuring Chroot"
    echo "" >> temp_vsftpd.conf
    echo "chroot_local_user="${vsftpd_chroot_local_user}"" >> temp_vsftpd.conf
    echo "chroot_list_enable="${vsftpd_chroot_list_enable}"" >> temp_vsftpd.conf
    echo "" >> temp_vsftpd.conf
    echo "userlist_deny="${vsftpd_userlist_deny}"" >> temp_vsftpd.conf
    echo "userlist_enable="${vsftpd_userlist_enable}"" >> temp_vsftpd.conf
    echo "userlist_file="${vsftpd_userlist_file}"" >> temp_vsftpd.conf

    info "Enabling SSL"

    if [[ ! -d "/etc/ssl/private" ]]; then
        mkdir /etc/ssl/private
    fi
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.key -out /etc/ssl/certs/vsftpd.crt
    
    echo "" >> temp_vsftpd.conf
    echo "ssl_enable="${vsftpd_ssl_enable}"" >> temp_vsftpd.conf
    echo "allow_anon_ssl="${vsftpd_allow_anon_ssl}"" >> temp_vsftpd.conf
    echo "force_local_data_ssl="${vsftpd_force_local_data_ssl}"" >> temp_vsftpd.conf
    echo "force_local_logins_ssl="${vsftpd_force_local_logins_ssl}"" >> temp_vsftpd.conf
    echo "require_ssl_reuse="${vsftpd_require_ssl_reuse}"" >> temp_vsftpd.conf
    echo "ssl_ciphers="${vsftpd_ssl_ciphers}"" >> temp_vsftpd.conf
    echo "rsa_cert_file="${vsftpd_rsa_cert_file}"" >> temp_vsftpd.conf
    echo "rsa_private_key_file="${vsftpd_rsa_private_key_file}"" >> temp_vsftpd.conf

    echo "" >> temp_vsftpd.conf
    rm /etc/vsftpd.conf
    mv ./temp_vsftpd.conf /etc/vsftpd.conf
    
    echo "${vsftpd_user}" > ${vsftpd_userlist_file}

    configure_vsftpd_user
    configure_vsftpd_ufw
    
    info "restarting service"
    systemctl restart vsftpd
}

function main_process() {
    check_root
    source .config
    enable_ufw
    update
    install_default
    configure_time
    configure_ip
    configure_ssh
    configure_vsftpd
    configure_sharedfolder
}

main_process
